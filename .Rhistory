intercept <- calc(s, fun)
plot(intercept)
fun=function(x) { if (is.na(x[1])){ NA } else { m <- lm(x[1:35] ~ x[36:70]);summary(m)$r.squared }}
r.squared <- calc(s, fun)
plot(r.squared)
plot(intercept)
plot(slope)
plot(intercept)
plot(r.squared)
chirps_75_spring <- list.files(path = here("4q_seasonal_data"),
pattern = "amj.tif",
full.names = TRUE) %>%
stack() %>%
projectRaster(to = eeflux_temp) %>%
mask(chirps_75_stack, mask = pdr.valley.shp)
chirps_75_spring <- list.files(path = here("4q_seasonal_data"),
pattern = "amj.tif",
full.names = TRUE) %>%
stack() %>%
projectRaster(to = eeflux_temp) %>%
mask(mask = pdr.valley.shp)
list.files(path = here("4q_seasonal_data"),
pattern = "amj.tif",
full.names = TRUE)
s_amj <- stack(eeflux_75_mask, chirps_75_spring)
fun=function(x) { if (is.na(x[1])){ NA } else { m <- lm(x[1:35] ~ x[36:70]);summary(m)$r.squared }}
r.squared_amj <- calc(s_amj, fun)
plot(r.squared_amj)
chirps_75_winter <- list.files(path = here("4q_seasonal_data"),
pattern = "jfm.tif",
full.names = TRUE) %>%
stack() %>%
projectRaster(to = eeflux_temp) %>%
mask(mask = pdr.valley.shp)
s_jfm <- stack(eeflux_75_mask, chirps_75_winter)
fun=function(x) { if (is.na(x[1])){ NA } else { m <- lm(x[1:35] ~ x[36:70]);summary(m)$r.squared }}
r.squared_jfm <- calc(s_jfm, fun)
plot(r.squared_jfm)
list.files(path = here("4q_seasonal_data"),
pattern = "jfm.tif",
full.names = TRUE)
chirps_75_summer <- list.files(path = here("4q_seasonal_data"),
pattern = "jas.tif",
full.names = TRUE) %>%
stack() %>%
projectRaster(to = eeflux_temp) %>%
mask(mask = pdr.valley.shp)
s_jas <- stack(eeflux_75_mask, chirps_75_summer)
fun=function(x) { if (is.na(x[1])){ NA } else { m <- lm(x[1:35] ~ x[36:70]);summary(m)$r.squared }}
r.squared_jas <- calc(s_jas, fun)
plot(r.squared_jas)
chirps_75_fall <- list.files(path = here("4q_seasonal_data"),
pattern = "ond.tif",
full.names = TRUE) %>%
stack() %>%
projectRaster(to = eeflux_temp) %>%
mask(mask = pdr.valley.shp)
s_ond <- stack(eeflux_75_mask, chirps_75_fall)
fun=function(x) { if (is.na(x[1])){ NA } else { m <- lm(x[1:35] ~ x[36:70]);summary(m)$r.squared }}
r.squared_ond <- calc(s_ond, fun)
plot(r.squared_ond)
?writeRaster
#Pixel-wise regression, from: https://matinbrandt.wordpress.com/2014/05/26/pixel-wise-regression-between-two-raster-time-series/
s <- stack(eeflux_75_mask, chirps_75_mask)
fun=function(x) { if (is.na(x[1])){ NA } else { m <- lm(x[1:35] ~ x[36:70]);summary(m)$r.squared }}
r.squared <- calc(s, fun) %>%
writeRaster(filename = here("raster_download/r_squared_125_275_pdr.tif"))
#Housekeeping
library(tidyverse)
library(raster)
library(rgdal)
library(here)
library(reshape)
library(scales)
library(R.utils)
library(sp)
library(sf)
library(parallel)
library(lubridate)
library(lfstat)
fun=function(x) { if (is.na(x[1])){ NA } else { m <- lm(x[1:35] ~ x[36:70]);summary(m)$r.squared }}
r.squared <- calc(s, fun) %>%
writeRaster(filename = here("raster_download/r_squared_125_275_pdr.tif"))
fun=function(x) { if (is.na(x[1])){ NA } else { m <- lm(x[1:35] ~ x[36:70]);summary(m)$r.squared }}
r.squared <- calc(s, fun) %>%
writeRaster(filename = here("raster_download/r_squared_125_275_pdr.tif"),
format = 'GTiff')
r.squared <- calc(s, fun) #%>%
fun=function(x) { if (is.na(x[1])){ NA } else { m <- lm(x[1:35] ~ x[36:70]);summary(m)$r.squared }}
r.squared <- calc(s, fun) #%>%
r.squared <- calc(s, fun) #%>%
#Pixel-wise regression, from: https://matinbrandt.wordpress.com/2014/05/26/pixel-wise-regression-between-two-raster-time-series/
s <- stack(eeflux_75_mask, chirps_75_mask)
# Growing season calculations - https://statnmap.com/2018-01-27-spatial-correlation-between-rasters/
pdr.valley.utm <- st_transform(pdr.valley.shp, 32610)
st_transform(crs = crs(eeflux_temp))
pdr.valley.shp <- sf::st_read(here("rasters/bbox/pdr_bbox/bd_foret_pdr.shp")) #%>%
eeflux_temp <- raster(here('rasters/eeflux/PDR/2020_08_25_et.tif')) %>%
projectRaster(crs = crs(pdr.valley.shp),
extent = extent(pdr.valley.shp)) %>%
raster::mask(mask = pdr.valley.shp)
# Growing season calculations - https://statnmap.com/2018-01-27-spatial-correlation-between-rasters/
pdr.valley.utm <- st_transform(pdr.valley.shp, 32610)
eeflux_75_rasters <- list.files(path = here("ee_growing_season_integrated"),
pattern = ".tif",
full.names = TRUE)
eeflux_75_stack <- stack(eeflux_75_rasters) %>%
projectRaster(to = eeflux_temp)
eeflux_75_rasters <- list.files(path = here("ee_growing_season_integrated"),
pattern = ".tif",
full.names = TRUE)
eeflux_75_stack <- stack(eeflux_75_rasters) %>%
projectRaster(to = eeflux_temp)
eeflux_75_mask <- mask(eeflux_75_stack, mask = pdr.valley.utm)
chirps_75_rasters <- list.files(path = here("ee_season_precip_data"),
pattern = ".tif",
full.names = TRUE)
chirps_75_stack <- stack(chirps_75_rasters) %>%
projectRaster(to = eeflux_temp)
chirps_75_mask <- mask(chirps_75_stack, mask = pdr.valley.utm)
fun=function(x) { if (is.na(x[1])){ NA } else { m <- lm(x[1:35] ~ x[36:70]);summary(m)$r.squared }}
r.squared <- calc(s, fun) %>%
writeRaster(filename = here("raster_download/r_squared_125_275_pdr.tif"),
format = 'GTiff')
r.squared <- calc(s, fun) %>%
writeRaster(x = r.squared,
filename = here("raster_download/r_squared_125_275_pdr.tif"),
format = 'GTiff')
fun=function(x) { if (is.na(x[1])){ NA } else { m <- lm(x[1:35] ~ x[36:70]);summary(m)$r.squared }}
r.squared <- calc(s, fun)
#Pixel-wise regression, from: https://matinbrandt.wordpress.com/2014/05/26/pixel-wise-regression-between-two-raster-time-series/
s <- stack(eeflux_75_mask, chirps_75_mask)
fun=function(x) { if (is.na(x[1])){ NA } else { m <- lm(x[1:35] ~ x[36:70]);summary(m)$r.squared }}
r.squared <- calc(s, fun)
writeRaster(x = r.squared,
filename = here("raster_download/r_squared_125_275_pdr.tif"),
format = 'GTiff')
plot(r.squared)
plot(chirps_75_mask)
plot(chirps_75_stack)
eeflux_75_mask <- mask(eeflux_75_stack, mask = pdr.valley.shp)
chirps_75_mask <- mask(chirps_75_stack, mask = pdr.valley.shp)
#Pixel-wise regression, from: https://matinbrandt.wordpress.com/2014/05/26/pixel-wise-regression-between-two-raster-time-series/
s <- stack(eeflux_75_mask, chirps_75_mask)
plot(s)
fun=function(x) { if (is.na(x[1])){ NA } else { m <- lm(x[1:35] ~ x[36:70]);summary(m)$r.squared }}
r.squared <- calc(s, fun)
writeRaster(x = r.squared,
filename = here("raster_download/r_squared_125_275_pdr.tif"),
format = 'GTiff')
writeRaster(x = r.squared,
filename = here("raster_download/r_squared_125_275_pdr.tif"),
format = 'GTiff',
overwrite = TRUE)
writeRaster(x = slope,
filename = here("raster_download/slope_125_275_pdr.tif"),
format = 'GTiff',
overwrite = TRUE)
fun=function(x) { if (is.na(x[1])){ NA } else { lm(x[1:35] ~ x[36:70])$coefficients[2] }}
slope <- calc(s, fun)
writeRaster(x = slope,
filename = here("raster_download/slope_125_275_pdr.tif"),
format = 'GTiff',
overwrite = TRUE)
eeflux_75_rasters <- list.files(path = here("ee_growing_season_integrated"),
pattern = ".tif",
full.names = TRUE)
eeflux_75_stack <- stack(eeflux_75_rasters) %>%
projectRaster(to = eeflux_temp)
eeflux_75_mask <- mask(eeflux_75_stack, mask = pdr.valley.shp)
chirps_75_rasters <- list.files(path = here("ee_season_precip_data"),
pattern = ".tif",
full.names = TRUE)
chirps_75_stack <- stack(chirps_75_rasters) %>%
projectRaster(to = eeflux_temp)
chirps_75_mask <- mask(chirps_75_stack, mask = pdr.valley.shp)
#Pixel-wise regression, from: https://matinbrandt.wordpress.com/2014/05/26/pixel-wise-regression-between-two-raster-time-series/
s <- stack(eeflux_75_mask, chirps_75_mask)
fun=function(x) { if (is.na(x[1])){ NA } else { lm(x[1:35] ~ x[36:70])$coefficients[2] }}
slope <- calc(s, fun)
writeRaster(x = slope,
filename = here("raster_download/slope_125_275_pdr.tif"),
format = 'GTiff',
overwrite = TRUE)
fun=function(x) { if (is.na(x[1])){ NA } else { lm(x[1:35] ~ x[36:70])$coefficients[1] }}
intercept <- calc(s, fun)
fun=function(x) { if (is.na(x[1])){ NA } else { m <- lm(x[1:35] ~ x[36:70]);summary(m)$r.squared }}
r.squared <- calc(s, fun)
writeRaster(x = r.squared,
filename = here("raster_download/r_squared_125_275_pdr.tif"),
format = 'GTiff',
overwrite = TRUE)
plot(r.squared)
plot(slope)
plot(intercept)
summary(m)
?summary
fun=function(x) { if (is.na(x[1])){ NA } else { m <- lm(x[1:35] ~ x[36:70]);
f <- summary(m)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p) }}
p.val <- calc(s, fun)
plot(p.val)
plot(r.squared)
fun=function(x) { if (is.na(x[1])){ NA } else { m <- lm(x[1:35] ~ x[36:70]);summary(m)$r.squared }}
r.squared <- calc(s, fun)
#Housekeeping
library(tidyverse)
library(raster)
library(rgdal)
library(here)
library(reshape)
library(scales)
library(R.utils)
library(sp)
library(sf)
library(parallel)
library(lubridate)
library(lfstat)
#Housekeeping
library(tidyverse)
library(raster)
library(rgdal)
library(here)
library(reshape)
library(scales)
library(R.utils)
library(sp)
library(sf)
library(parallel)
library(lubridate)
library(lfstat)
eeflux_temp <- raster(here('rasters/eeflux/PDR/2020_08_25_et.tif')) %>%
projectRaster(crs = crs(pdr.valley.shp),
extent = extent(pdr.valley.shp)) %>%
raster::mask(mask = pdr.valley.shp)
pdr.valley.shp <- sf::st_read(here("rasters/bbox/pdr_bbox/bd_foret_pdr.shp")) #%>%
eeflux_temp <- raster(here('rasters/eeflux/PDR/2020_08_25_et.tif')) %>%
projectRaster(crs = crs(pdr.valley.shp),
extent = extent(pdr.valley.shp)) %>%
raster::mask(mask = pdr.valley.shp)
eeflux_75_rasters <- list.files(path = here("ee_growing_season_integrated"),
pattern = ".tif",
full.names = TRUE)
eeflux_75_stack <- stack(eeflux_75_rasters) %>%
projectRaster(to = eeflux_temp)
eeflux_75_stack <- stack(eeflux_75_rasters) %>%
projectRaster(to = eeflux_temp)
eeflux_75_mask <- mask(eeflux_75_stack, mask = pdr.valley.shp)
chirps_75_rasters <- list.files(path = here("ee_season_precip_data"),
pattern = ".tif",
full.names = TRUE)
chirps_75_stack <- stack(chirps_75_rasters) %>%
projectRaster(to = eeflux_temp)
chirps_75_mask <- mask(chirps_75_stack, mask = pdr.valley.shp)
#Pixel-wise regression, from: https://matinbrandt.wordpress.com/2014/05/26/pixel-wise-regression-between-two-raster-time-series/
s <- stack(eeflux_75_mask, chirps_75_mask)
fun=function(x) { if (is.na(x[1])){ NA } else { lm(x[1:35] ~ x[36:70])$coefficients[2] }}
slope <- calc(s, fun)
writeRaster(x = slope,
filename = here("raster_download/slope_125_275_pdr.tif"),
format = 'GTiff',
overwrite = TRUE)
fun=function(x) { if (is.na(x[1])){ NA } else { m <- lm(x[1:35] ~ x[36:70]);summary(m)$r.squared }}
r.squared <- calc(s, fun)
writeRaster(x = r.squared,
filename = here("raster_download/r_squared_125_275_pdr.tif"),
format = 'GTiff',
overwrite = TRUE
fun=function(x) { if (is.na(x[1])){ NA } else { m <- lm(x[1:35] ~ x[36:70]);
fun=function(x) { if (is.na(x[1])){ NA } else { m <- lm(x[1:35] ~ x[36:70]);
f <- summary(m)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p) }}
p.val <- calc(s, fun)
writeRaster(x = p.val,
filename = here("raster_download/p_val_125_275_pdr.tif"),
format = 'GTiff',
overwrite = TRUE)
library(here)
list.files(here("rasters/eeflux/ISP"))
list.files(here("rasters/eeflux/PDR"))
#Housekeeping
library(tidyverse)
library(raster)
library(rgdal)
library(here)
library(reshape)
library(scales)
library(R.utils)
library(sp)
library(sf)
library(parallel)
library(lubridate)
library(lfstat)
?str_extract
ISP <- list.files(here("rasters/eeflux/ISP"), full.names = TRUE)
?str_extract
View(ISP)
auto_eeflux <- function(x) {for .zip in (x)
auto_eeflux <- function(x) {for .zip in (x)
auto_unzip <- function(x) {for zip in (x)
auto_unzip <- function(x){for zip in (x)
auto_unzip <- function(x){for (zip in x)
x <- unzip(zip)
# Use lubridate - how to specify character positions? Also rename PDR rasters? For loop?
}
ISP <- list.files(here("rasters/eeflux/ISP"),
pattern = ".zip",
full.names = TRUE)
auto_unzip(ISP)
?unzip
?gunzip
eeflux_list <- list.files(here("rasters/eeflux"),
pattern = ".zip",
full.names = TRUE,
recursive = TRUE)
lapply(eeflux_list, auto_unzip)
#Housekeeping
library(tidyverse)
library(raster)
library(rgdal)
library(here)
library(reshape)
library(scales)
library(R.utils)
library(sp)
library(sf)
library(parallel)
library(lubridate)
library(lfstat)
library(stringr)
#Housekeeping
library(tidyverse)
library(raster)
library(rgdal)
library(here)
library(reshape)
library(scales)
library(R.utils)
library(sp)
library(sf)
library(parallel)
library(lubridate)
library(lfstat)
library(stringr)
ISP_tif <- list.files(here("rasters/eeflux/ISP"),
pattern = ".tif",
full.names = TRUE)
isp.valley.shp <- sf::st_read(here("rasters/bbox/isp_bbox/bd_foret_isp.shp"))
eeflux_temp <- raster(here('rasters/eeflux/PDR/2020_08_25_et.tif'))
crs(isp.valley.shp)
crs(eeflux_temp)
# Set to updated valley mask
eeflux_temp <- raster(here('rasters/eeflux/ISP/2020-08-27-ET-ISP.tif')) %>%
projectRaster(crs = crs(isp.valley.shp),
extent = extent(isp.valley.shp)) %>%
raster::mask(mask = isp.valley.shp)
plot(eeflux_temp)
# This command returns raster_list df w/ file path + water year
raster_df <- data.frame(f = chirps.clipped) %>% # Take chirps.clipped, give name f
mutate(wateryear = lfstat::water_year(x =
lubridate::ymd(
str_extract(chirps.clipped, pattern = "[0-9]{4}\\.[0-9]{2}\\.[0-9]{2}")),
origin = 'usgs'))
chirps.clipped <- list.files(here('rasters/chirps-clipped'),
full.names = TRUE)
# This command returns raster_list df w/ file path + water year
raster_df <- data.frame(f = chirps.clipped) %>% # Take chirps.clipped, give name f
mutate(wateryear = lfstat::water_year(x =
lubridate::ymd(
str_extract(chirps.clipped, pattern = "[0-9]{4}\\.[0-9]{2}\\.[0-9]{2}")),
origin = 'usgs'))
View(raster_df)
water_years <- c(1981:2020)
res(eeflux_temp)
crs(raster(here("rasters/chirps-wy/chirps-pdr/pdr_chirps-2020.tif")))
raster(here("rasters/chirps-wy/chirps-pdr/pdr_chirps-2020.tif"))
crs(raster(here("rasters/chirps-wy/chirps-pdr/pdr_chirps_2020.tif")))
crs(eeflux_temp)
water_years <- c(1981:2020)
mclapply(water_years,
crop_stack,
mc.silent = FALSE)
crop_stack <- function(y){
for (y in water_years){
message('Year is now ', y)
wy <- raster_df %>%
filter(wateryear == y) %>%
dplyr::select(-wateryear) %>%
.$f
suppressWarnings({ # This says run wystack, and don't give crs warnings (will run faster)
wystack <- stack(wy)
})
wystack_2 <- projectRaster(wystack, to = eeflux_temp) # converted eeflux to lcc proj above
wystack_3 <- mask(wystack_2, mask = isp.valley.shp) # change for new site
wy_total <- wystack_3 %>% calc(fun = sum, na.rm = TRUE)
# Change for new site
writeRaster(wy_total,
filename = here('rasters/chirps-wy/chirps-isp',
paste("isp_chirps_", y, ".tif", sep = '')),
overwrite = TRUE)
}
return(plot(wystack_2))
}
mclapply(water_years,
crop_stack,
mc.silent = FALSE)
brc.valley.shp <- sf::st_read(here("rasters/bbox/brc_bbox/bd_foret_brc.shp"))
#Housekeeping
library(tidyverse)
library(raster)
library(rgdal)
library(here)
library(reshape)
library(scales)
library(R.utils)
library(sp)
library(sf)
library(parallel)
library(lubridate)
library(lfstat)
library(stringr)
brc.valley.shp <- sf::st_read(here("rasters/bbox/brc_bbox/bd_foret_brc.shp"))
raster(here('rasters/eeflux/BRC/2020-02-27-ET-BRC.tif')) %>%
projectRaster(crs = crs(brc.valley.shp),
extent = extent(brc.valley.shp)) %>%
raster::mask(mask = brc.valley.shp) %>%
writeRaster(here("rasters/bbox/brc_bbox/brc_crop.tif"))
?writeRaster
eeflux_temp_brc <- raster(here('rasters/eeflux/BRC/2020-02-27-ET-BRC.tif')) %>%
projectRaster(crs = crs(brc.valley.shp),
extent = extent(brc.valley.shp)) %>%
raster::mask(mask = brc.valley.shp)
isp.valley.shp <- sf::st_read(here("rasters/bbox/isp_bbox/bd_foret_isp.shp"))
# Set to updated valley mask
eeflux_temp <- raster(here('rasters/eeflux/ISP/2020-08-27-ET-ISP.tif')) %>%
projectRaster(crs = crs(isp.valley.shp),
extent = extent(isp.valley.shp)) %>%
raster::mask(mask = isp.valley.shp)
eeflux_temp_brc <- raster(here('rasters/eeflux/BRC/2020-02-27-ET-BRC.tif')) %>%
projectRaster(crs = crs(brc.valley.shp),
extent = extent(brc.valley.shp)) %>%
raster::mask(mask = brc.valley.shp)
eeflux_temp_brc <- raster(here('rasters/eeflux/BRC/2020-02-27-ET-BRC.tif')) %>%
projectRaster(crs = crs(brc.valley.shp),
extent = extent(brc.valley.shp))
eeflux_temp_brc <- raster(here('rasters/eeflux/BRC/2020-07-26-ET-BRC.tif')) %>%
projectRaster(crs = crs(brc.valley.shp),
extent = extent(brc.valley.shp)) %>%
raster::mask(mask = brc.valley.shp)
writeRaster(eeflux_temp_brc, here("rasters/bbox/brc_bbox/brc_crop.tif"), format = "GTiff")
water_years <- c(1984:2020)
mclapply(water_years,
crop_stack,
mc.silent = FALSE)
water_years <- c(1984:2020)
crop_stack <- function(y){
for (y in water_years){
message('Year is now ', y)
wy <- raster_df %>%
filter(wateryear == y) %>%
dplyr::select(-wateryear) %>%
.$f
suppressWarnings({ # This says run wystack, and don't give crs warnings (will run faster)
wystack <- stack(wy)
})
wystack_2 <- projectRaster(wystack, to = eeflux_temp) # converted eeflux to lcc proj above
wystack_3 <- mask(wystack_2, mask = isp.valley.shp) # change for new site
wy_total <- wystack_3 %>% calc(fun = sum, na.rm = TRUE)
# Change for new site
writeRaster(wy_total,
filename = here('rasters/chirps-wy/chirps-isp',
paste("isp_chirps_", y, ".tif", sep = '')),
overwrite = TRUE)
}
return(plot(wystack_2))
}
# This command returns raster_list df w/ file path + water year
raster_df <- data.frame(f = chirps.clipped) %>% # Take chirps.clipped, give name f
mutate(wateryear = lfstat::water_year(x =
lubridate::ymd(
str_extract(chirps.clipped, pattern = "[0-9]{4}\\.[0-9]{2}\\.[0-9]{2}")),
origin = 'usgs'))
chirps.clipped <- list.files(here('rasters/chirps-clipped'),
full.names = TRUE)
crop_stack <- function(y){
for (y in water_years){
message('Year is now ', y)
wy <- raster_df %>%
filter(wateryear == y) %>%
dplyr::select(-wateryear) %>%
.$f
suppressWarnings({ # This says run wystack, and don't give crs warnings (will run faster)
wystack <- stack(wy)
})
wystack_2 <- projectRaster(wystack, to = eeflux_temp) # converted eeflux to lcc proj above
wystack_3 <- mask(wystack_2, mask = isp.valley.shp) # change for new site
wy_total <- wystack_3 %>% calc(fun = sum, na.rm = TRUE)
# Change for new site
writeRaster(wy_total,
filename = here('rasters/chirps-wy/chirps-isp',
paste("isp_chirps_", y, ".tif", sep = '')),
overwrite = TRUE)
}
return(plot(wystack_2))
}
mclapply(water_years,
crop_stack,
mc.silent = FALSE)
